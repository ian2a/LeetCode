class Solution {
    private class TrieNode {
        TrieNode[] children;
        List<Integer> list;
        int index;
        
        TrieNode() {
            children = new TrieNode[26];
            list = new ArrayList<>();
            index = -1;
        }
    }
    
    public List<List<Integer>> palindromePairs(String[] words) {
        TrieNode root = new TrieNode();
        List<List<Integer>> result = new ArrayList<>();
        
        for (int i = 0; i < words.length; i++) {
            add(root, words[i], i);
        }
        
        for (int i = 0; i < words.length; i++) {
            search(root, words[i], i, result);
        }
        
        return result;
    }
    
    private void add(TrieNode node, String word, int i) {
        for (int j = word.length() - 1; j >= 0; j--) {
            int index = word.charAt(j) - 'a';
            if (node.children[index] == null) {
                node.children[index] = new TrieNode();
            }
            if (isPalindrome(word, 0, j)) {
                node.list.add(i);
            }
            node = node.children[index];
        }
        node.list.add(i);
        node.index = i;
    }
    
    private void search(TrieNode node, String word, int i, List<List<Integer>> result) {
        for (int j = 0; j < word.length(); j++) {
            if (node.index != i && node.index >= 0 && isPalindrome(word, j, word.length() - 1)) {
                result.add(Arrays.asList(i, node.index));
            }
            
            int index = word.charAt(j) - 'a';
            node = node.children[index];
            if (node == null) {
                return;
            }
        }
                    
        for (int k: node.list) {
            if (k == i) {
                continue;
            }
            result.add(Arrays.asList(i, k));
        }
    }
    
    private boolean isPalindrome(String word, int i, int j) {
        while (i < j) {
            if (word.charAt(i++) != word.charAt(j--)) {
                return false;
            }
        }
        return true;
    }
}
